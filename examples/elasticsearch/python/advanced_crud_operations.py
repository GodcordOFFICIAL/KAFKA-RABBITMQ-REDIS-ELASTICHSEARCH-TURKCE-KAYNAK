"""
Elasticsearch Advanced CRUD Operations

Bu dosya Elasticsearch i√ßin geli≈ümi≈ü CRUD operasyonlarƒ± ve 
index management √∂rnekleri i√ßerir.
"""

from elasticsearch import Elasticsearch, helpers
from datetime import datetime, timedelta
import json
import uuid
import random
from typing import List, Dict, Any, Optional
import time

class AdvancedElasticsearchCRUD:
    """
    Elasticsearch i√ßin geli≈ümi≈ü CRUD operasyonlarƒ±
    """
    
    def __init__(self, hosts=['localhost:9200'], **kwargs):
        """
        Elasticsearch client ba≈ülat
        
        Args:
            hosts: Elasticsearch host listesi
            **kwargs: Ek connection parametreleri
        """
        self.es = Elasticsearch(hosts, **kwargs)
        print(f"‚úÖ Elasticsearch'e baƒülanƒ±ldƒ±: {hosts}")
        
        # Connection test
        try:
            info = self.es.info()
            print(f"üìä Cluster: {info['cluster_name']}, Version: {info['version']['number']}")
        except Exception as e:
            print(f"‚ùå Baƒülantƒ± hatasƒ±: {e}")
    
    def setup_product_index(self):
        """
        Product index'ini template ile olu≈ütur
        """
        print("\nüèóÔ∏è  Product Index Setup")
        print("-" * 40)
        
        # Index template
        template_config = {
            "index_patterns": ["products-*"],
            "priority": 100,
            "template": {
                "settings": {
                    "number_of_shards": 2,
                    "number_of_replicas": 1,
                    "refresh_interval": "30s",
                    "analysis": {
                        "analyzer": {
                            "product_search": {
                                "type": "custom",
                                "tokenizer": "standard",
                                "filter": ["lowercase", "stop", "stemmer"]
                            },
                            "product_ngram": {
                                "type": "custom",
                                "tokenizer": "ngram_tokenizer",
                                "filter": ["lowercase"]
                            }
                        },
                        "tokenizer": {
                            "ngram_tokenizer": {
                                "type": "ngram",
                                "min_gram": 2,
                                "max_gram": 3,
                                "token_chars": ["letter", "digit"]
                            }
                        }
                    }
                },
                "mappings": {
                    "properties": {
                        "name": {
                            "type": "text",
                            "analyzer": "product_search",
                            "fields": {
                                "keyword": {
                                    "type": "keyword"
                                },
                                "ngram": {
                                    "type": "text",
                                    "analyzer": "product_ngram"
                                },
                                "suggest": {
                                    "type": "completion"
                                }
                            }
                        },
                        "description": {
                            "type": "text",
                            "analyzer": "product_search"
                        },
                        "price": {
                            "type": "double"
                        },
                        "category": {
                            "type": "keyword"
                        },
                        "brand": {
                            "type": "keyword"
                        },
                        "tags": {
                            "type": "keyword"
                        },
                        "specifications": {
                            "type": "object",
                            "dynamic": True
                        },
                        "rating": {
                            "type": "float"
                        },
                        "review_count": {
                            "type": "integer"
                        },
                        "in_stock": {
                            "type": "boolean"
                        },
                        "created_at": {
                            "type": "date"
                        },
                        "updated_at": {
                            "type": "date"
                        },
                        "location": {
                            "type": "geo_point"
                        }
                    }
                }
            }
        }
        
        try:
            # Template olu≈ütur
            self.es.indices.put_index_template(
                name="products_template",
                body=template_config
            )
            print("‚úÖ Index template olu≈üturuldu")
            
            # Index olu≈ütur
            index_name = "products-demo"
            if not self.es.indices.exists(index=index_name):
                self.es.indices.create(index=index_name)
                print(f"‚úÖ Index olu≈üturuldu: {index_name}")
            else:
                print(f"üìã Index zaten mevcut: {index_name}")
                
            return index_name
            
        except Exception as e:
            print(f"‚ùå Index setup hatasƒ±: {e}")
            return None
    
    def generate_sample_products(self, count=50):
        """
        Test i√ßin sample product verileri olu≈ütur
        
        Args:
            count: Olu≈üturulacak product sayƒ±sƒ±
        """
        categories = ["electronics", "clothing", "books", "home", "sports"]
        brands = ["Apple", "Samsung", "Nike", "Adidas", "Sony", "LG", "Dell", "HP"]
        
        products = []
        
        for i in range(count):
            category = random.choice(categories)
            brand = random.choice(brands)
            
            product = {
                "name": f"{brand} {category.title()} Product {i+1}",
                "description": f"High quality {category} product from {brand}. Perfect for daily use.",
                "price": round(random.uniform(10, 2000), 2),
                "category": category,
                "brand": brand,
                "tags": [category, brand.lower(), "popular"],
                "specifications": {
                    "weight": f"{random.uniform(0.1, 5.0):.1f}kg",
                    "color": random.choice(["black", "white", "red", "blue", "green"]),
                    "warranty": f"{random.randint(1, 3)} years"
                },
                "rating": round(random.uniform(1, 5), 1),
                "review_count": random.randint(0, 1000),
                "in_stock": random.choice([True, False]),
                "created_at": (datetime.now() - timedelta(days=random.randint(0, 365))).isoformat(),
                "updated_at": datetime.now().isoformat(),
                "location": {
                    "lat": round(random.uniform(36, 42), 4),  # Turkey coordinates
                    "lon": round(random.uniform(26, 45), 4)
                }
            }
            
            products.append(product)
        
        return products
    
    def demo_single_document_operations(self, index_name):
        """
        Tekil document operasyonlarƒ± demo
        """
        print("\nüìÑ Single Document Operations")
        print("-" * 40)
        
        # 1. Document olu≈ütur
        product = {
            "name": "iPhone 14 Pro",
            "description": "Latest iPhone with advanced camera system",
            "price": 999.99,
            "category": "electronics",
            "brand": "Apple",
            "tags": ["smartphone", "apple", "premium"],
            "specifications": {
                "storage": "128GB",
                "color": "Deep Purple",
                "display": "6.1 inch"
            },
            "rating": 4.8,
            "review_count": 250,
            "in_stock": True
        }
        
        doc_id = "iphone-14-pro"
        
        try:
            # Create
            result = self.es.index(
                index=index_name,
                id=doc_id,
                body={
                    **product,
                    "created_at": datetime.now().isoformat(),
                    "updated_at": datetime.now().isoformat()
                },
                op_type='create'
            )
            print(f"‚úÖ Document olu≈üturuldu: {doc_id} (version: {result['_version']})")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Document zaten mevcut: {e}")
        
        # 2. Document getir
        try:
            doc = self.es.get(index=index_name, id=doc_id)
            print(f"üìñ Document getirildi: {doc['_source']['name']}")
            print(f"   Fiyat: ${doc['_source']['price']}")
            print(f"   Stok: {'‚úÖ' if doc['_source']['in_stock'] else '‚ùå'}")
            current_version = doc['_version']
            
        except Exception as e:
            print(f"‚ùå Document getirme hatasƒ±: {e}")
            return
        
        # 3. Document g√ºncelle
        try:
            update_result = self.es.update(
                index=index_name,
                id=doc_id,
                body={
                    "doc": {
                        "price": 899.99,  # Fiyat indirimi
                        "on_sale": True,
                        "updated_at": datetime.now().isoformat()
                    }
                },
                version=current_version
            )
            print(f"‚úÖ Document g√ºncellendi: version {update_result['_version']}")
            
        except Exception as e:
            print(f"‚ùå Update hatasƒ±: {e}")
        
        # 4. Script ile g√ºncelleme
        try:
            script_result = self.es.update(
                index=index_name,
                id=doc_id,
                body={
                    "script": {
                        "source": """
                        ctx._source.review_count += params.new_reviews;
                        ctx._source.rating = (ctx._source.rating * ctx._source.review_count + params.total_rating) / (ctx._source.review_count + params.new_reviews);
                        ctx._source.updated_at = params.timestamp;
                        """,
                        "params": {
                            "new_reviews": 25,
                            "total_rating": 120,  # 25 reviews with avg 4.8 rating
                            "timestamp": datetime.now().isoformat()
                        }
                    }
                }
            )
            print(f"‚úÖ Script ile g√ºncellendi: version {script_result['_version']}")
            
        except Exception as e:
            print(f"‚ùå Script update hatasƒ±: {e}")
        
        # 5. Upsert operation
        try:
            upsert_result = self.es.update(
                index=index_name,
                id="samsung-galaxy-s23",
                body={
                    "doc": {
                        "price": 799.99,
                        "updated_at": datetime.now().isoformat()
                    },
                    "upsert": {
                        "name": "Samsung Galaxy S23",
                        "description": "Advanced Android smartphone",
                        "price": 799.99,
                        "category": "electronics",
                        "brand": "Samsung",
                        "created_at": datetime.now().isoformat(),
                        "updated_at": datetime.now().isoformat()
                    }
                }
            )
            print(f"‚úÖ Upsert tamamlandƒ±: {upsert_result['result']}")
            
        except Exception as e:
            print(f"‚ùå Upsert hatasƒ±: {e}")
    
    def demo_bulk_operations(self, index_name):
        """
        Bulk operasyon demo
        """
        print("\nüì¶ Bulk Operations")
        print("-" * 40)
        
        # Sample products olu≈ütur
        products = self.generate_sample_products(20)
        
        # Bulk actions listesi hazƒ±rla
        bulk_actions = []
        
        for i, product in enumerate(products):
            # Action header
            action = {
                "index": {
                    "_index": index_name,
                    "_id": f"bulk-product-{i+1}"
                }
            }
            
            # Document body
            bulk_actions.append(action)
            bulk_actions.append(product)
        
        try:
            # Bulk indexing
            start_time = time.time()
            
            result = self.es.bulk(body=bulk_actions)
            
            end_time = time.time()
            
            # Sonu√ßlarƒ± analiz et
            success_count = 0
            error_count = 0
            
            for item in result['items']:
                if 'index' in item:
                    if 'error' in item['index']:
                        error_count += 1
                    else:
                        success_count += 1
            
            print(f"‚úÖ Bulk indexing tamamlandƒ±:")
            print(f"   üìä Toplam: {len(products)} document")
            print(f"   ‚úÖ Ba≈üarƒ±lƒ±: {success_count}")
            print(f"   ‚ùå Hatalƒ±: {error_count}")
            print(f"   ‚è±Ô∏è  S√ºre: {end_time - start_time:.2f} saniye")
            print(f"   üöÄ Throughput: {success_count / (end_time - start_time):.0f} docs/sec")
            
        except Exception as e:
            print(f"‚ùå Bulk operations hatasƒ±: {e}")
    
    def demo_multi_get(self, index_name):
        """
        Multi-get operations demo
        """
        print("\nüìö Multi-Get Operations")
        print("-" * 40)
        
        # Multi-get request
        mget_body = {
            "docs": [
                {
                    "_index": index_name,
                    "_id": "iphone-14-pro"
                },
                {
                    "_index": index_name,
                    "_id": "samsung-galaxy-s23",
                    "_source": ["name", "price", "brand"]
                },
                {
                    "_index": index_name,
                    "_id": "bulk-product-1"
                },
                {
                    "_index": index_name,
                    "_id": "non-existent-product"
                }
            ]
        }
        
        try:
            result = self.es.mget(body=mget_body)
            
            print(f"üìñ Multi-get sonu√ßlarƒ±:")
            
            for doc in result['docs']:
                if doc['found']:
                    source = doc['_source']
                    print(f"   ‚úÖ {doc['_id']}: {source.get('name', 'N/A')} - ${source.get('price', 'N/A')}")
                else:
                    print(f"   ‚ùå {doc['_id']}: Bulunamadƒ±")
                    
        except Exception as e:
            print(f"‚ùå Multi-get hatasƒ±: {e}")
    
    def demo_update_by_query(self, index_name):
        """
        Update by query demo
        """
        print("\nüîÑ Update by Query")
        print("-" * 40)
        
        # T√ºm Apple √ºr√ºnlerinin fiyatƒ±na %10 indirim uygula
        try:
            result = self.es.update_by_query(
                index=index_name,
                body={
                    "query": {
                        "term": {
                            "brand": "Apple"
                        }
                    },
                    "script": {
                        "source": """
                        ctx._source.price = Math.round(ctx._source.price * 0.9 * 100.0) / 100.0;
                        ctx._source.on_sale = true;
                        ctx._source.discount_percent = 10;
                        ctx._source.updated_at = params.timestamp;
                        """,
                        "params": {
                            "timestamp": datetime.now().isoformat()
                        }
                    }
                },
                wait_for_completion=True
            )
            
            print(f"‚úÖ Update by query tamamlandƒ±:")
            print(f"   üìä G√ºncellenen document sayƒ±sƒ±: {result['updated']}")
            print(f"   ‚è±Ô∏è  S√ºre: {result['took']}ms")
            
        except Exception as e:
            print(f"‚ùå Update by query hatasƒ±: {e}")
    
    def demo_delete_operations(self, index_name):
        """
        Delete operations demo
        """
        print("\nüóëÔ∏è  Delete Operations")
        print("-" * 40)
        
        # Single document delete
        try:
            result = self.es.delete(
                index=index_name,
                id="bulk-product-20"  # Son product'ƒ± sil
            )
            print(f"‚úÖ Document silindi: bulk-product-20")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Delete hatasƒ±: {e}")
        
        # Delete by query - stokta olmayan √ºr√ºnleri sil
        try:
            result = self.es.delete_by_query(
                index=index_name,
                body={
                    "query": {
                        "bool": {
                            "must": [
                                {"term": {"in_stock": False}},
                                {"range": {"price": {"lt": 50}}}  # D√º≈ü√ºk fiyatlƒ± ve stokta olmayan
                            ]
                        }
                    }
                },
                wait_for_completion=True
            )
            
            print(f"‚úÖ Delete by query tamamlandƒ±:")
            print(f"   üìä Silinen document sayƒ±sƒ±: {result['deleted']}")
            print(f"   ‚è±Ô∏è  S√ºre: {result['took']}ms")
            
        except Exception as e:
            print(f"‚ùå Delete by query hatasƒ±: {e}")
    
    def demo_advanced_search(self, index_name):
        """
        Advanced search operations demo
        """
        print("\nüîç Advanced Search Operations")
        print("-" * 40)
        
        # 1. Complex bool query
        search_body = {
            "size": 10,
            "query": {
                "bool": {
                    "must": [
                        {"range": {"price": {"gte": 100, "lte": 1000}}}
                    ],
                    "should": [
                        {"match": {"description": "high quality"}},
                        {"term": {"brand": "Apple"}}
                    ],
                    "filter": [
                        {"term": {"in_stock": True}},
                        {"terms": {"category": ["electronics", "clothing"]}}
                    ]
                }
            },
            "sort": [
                {"rating": {"order": "desc"}},
                {"price": {"order": "asc"}}
            ],
            "_source": ["name", "price", "brand", "rating"]
        }
        
        try:
            result = self.es.search(index=index_name, body=search_body)
            
            print(f"üîç Search sonu√ßlarƒ± ({result['hits']['total']['value']} toplam):")
            
            for hit in result['hits']['hits']:
                source = hit['_source']
                score = hit['_score']
                print(f"   üì± {source['name']} - ${source['price']} (Score: {score:.2f})")
                print(f"      Brand: {source['brand']}, Rating: {source['rating']}")
                
        except Exception as e:
            print(f"‚ùå Search hatasƒ±: {e}")
    
    def demo_aggregations(self, index_name):
        """
        Aggregation demo
        """
        print("\nüìä Aggregations")
        print("-" * 40)
        
        agg_body = {
            "size": 0,  # Sadece aggregation sonu√ßlarƒ±
            "aggs": {
                "categories": {
                    "terms": {
                        "field": "category",
                        "size": 10
                    },
                    "aggs": {
                        "avg_price": {
                            "avg": {
                                "field": "price"
                            }
                        },
                        "price_stats": {
                            "stats": {
                                "field": "price"
                            }
                        }
                    }
                },
                "price_histogram": {
                    "histogram": {
                        "field": "price",
                        "interval": 200
                    }
                },
                "rating_ranges": {
                    "range": {
                        "field": "rating",
                        "ranges": [
                            {"to": 2},
                            {"from": 2, "to": 3},
                            {"from": 3, "to": 4},
                            {"from": 4}
                        ]
                    }
                }
            }
        }
        
        try:
            result = self.es.search(index=index_name, body=agg_body)
            
            # Category aggregation
            print("üìÇ Kategori bazlƒ± istatistikler:")
            for bucket in result['aggregations']['categories']['buckets']:
                category = bucket['key']
                count = bucket['doc_count']
                avg_price = bucket['avg_price']['value']
                
                print(f"   {category}: {count} √ºr√ºn, Ortalama fiyat: ${avg_price:.2f}")
            
            # Price histogram
            print("\nüí∞ Fiyat daƒüƒ±lƒ±mƒ±:")
            for bucket in result['aggregations']['price_histogram']['buckets']:
                price_range = f"${bucket['key']}-${bucket['key'] + 200}"
                count = bucket['doc_count']
                print(f"   {price_range}: {count} √ºr√ºn")
            
            # Rating ranges
            print("\n‚≠ê Rating daƒüƒ±lƒ±mƒ±:")
            rating_labels = ["üòû Poor (0-2)", "üòê Fair (2-3)", "üòä Good (3-4)", "üåü Excellent (4+)"]
            for i, bucket in enumerate(result['aggregations']['rating_ranges']['buckets']):
                count = bucket['doc_count']
                print(f"   {rating_labels[i]}: {count} √ºr√ºn")
                
        except Exception as e:
            print(f"‚ùå Aggregation hatasƒ±: {e}")
    
    def get_index_stats(self, index_name):
        """
        Index istatistiklerini g√∂ster
        """
        print(f"\nüìä Index ƒ∞statistikleri: {index_name}")
        print("-" * 40)
        
        try:
            # Index stats
            stats = self.es.indices.stats(index=index_name)
            index_stats = stats['indices'][index_name]
            
            print(f"üìÑ Document sayƒ±sƒ±: {index_stats['total']['docs']['count']}")
            print(f"üóëÔ∏è  Silinen document: {index_stats['total']['docs']['deleted']}")
            print(f"üíæ Store boyutu: {index_stats['total']['store']['size_in_bytes'] / 1024 / 1024:.2f} MB")
            
            # Index mapping
            mapping = self.es.indices.get_mapping(index=index_name)
            properties = mapping[index_name]['mappings']['properties']
            print(f"üóÇÔ∏è  Field sayƒ±sƒ±: {len(properties)}")
            
            # Index settings
            settings = self.es.indices.get_settings(index=index_name)
            index_settings = settings[index_name]['settings']['index']
            print(f"üîß Shard sayƒ±sƒ±: {index_settings['number_of_shards']}")
            print(f"üìã Replica sayƒ±sƒ±: {index_settings['number_of_replicas']}")
            
        except Exception as e:
            print(f"‚ùå Stats alma hatasƒ±: {e}")

def main():
    """
    Ana demo fonksiyonu
    """
    print("üîß Elasticsearch Advanced CRUD Operations Demo")
    print("=" * 60)
    
    # Client olu≈ütur
    crud = AdvancedElasticsearchCRUD()
    
    # Index setup
    index_name = crud.setup_product_index()
    if not index_name:
        print("‚ùå Index setup ba≈üarƒ±sƒ±z, demo sonlandƒ±rƒ±lƒ±yor")
        return
    
    # Demo scenarios
    scenarios = [
        ("Single Document Operations", crud.demo_single_document_operations),
        ("Bulk Operations", crud.demo_bulk_operations),
        ("Multi-Get Operations", crud.demo_multi_get),
        ("Update by Query", crud.demo_update_by_query),
        ("Advanced Search", crud.demo_advanced_search),
        ("Aggregations", crud.demo_aggregations),
        ("Delete Operations", crud.demo_delete_operations)
    ]
    
    # T√ºm scenario'larƒ± √ßalƒ±≈ütƒ±r
    for scenario_name, scenario_func in scenarios:
        try:
            scenario_func(index_name)
            time.sleep(1)  # Elasticsearch'in refresh olmasƒ± i√ßin
        except Exception as e:
            print(f"‚ùå {scenario_name} hatasƒ±: {e}")
    
    # Final stats
    crud.get_index_stats(index_name)
    
    print("\n‚úÖ Demo tamamlandƒ±!")
    print("üí° Kibana'da sonu√ßlarƒ± incelemek i√ßin: http://localhost:5601")

if __name__ == "__main__":
    main()